1. 多線程：同個進程下分配不同CPU時間段 -> CPU搶奪, 需要進程池避免
   多進程:：不同CPU下, 進程間數據無法同步 -> 隊列
   協程：類似多線程, 但可以獲取返回值, 只是主進程也需異步

2. 多線程競爭：如果多个线程、或者是數據過大，抢到的时间片可能不够用，无法一次完成全部操作，同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确

3. 鎖：避免數據混亂
   死鎖：
   在线程间共享多个资源的时候，如果两个线程分别占有一部分资源并且同时等待对方的资源，就会造成死锁。
   已经进入到了死锁状态，可以使用 ctrl-c 退出
避免死锁：
程序设计时要尽量避免死锁（银行家算法）
添加超时时间等

4. 線程安全：線程所需CPU大於系統CPU
当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制
线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。

互斥鎖：
保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的准确性。
互斥锁为资源引入一个状态：锁定 / 非锁定

鎖定：要更改共享数据时，其他线程不能更改
非鎖定：直到该线程释放资源，将资源的状态变成 非锁定，其他的线程才能再次锁定该资源

Python進程與線程的使用：
在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据
缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）